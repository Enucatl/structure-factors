#!/usr/bin/env python
# pylint: disable=all

"""Pre commit hook to run checks on the new python code

adapted from https://gist.github.com/spulec/1364640#file-pre-commit

"""

import os
import re
import subprocess
import sys

modified = re.compile('^(?:M|A)(\s+)(?P<name>.*)')

CHECKS = [
    {
        'output': 'Running pep8...',
        'command': 'pep8 -r --ignore=E501,W293 %s',
        'match_files': ['.*\.py$'],
        'ignore_files': ["setup.py", "distribute_setup.py"],
        'print_filename': False,
    },
]


def matches_file(file_name, match_files):
    "check if the file name matches the re"
    return any(re.compile(match_file).match(file_name)
               for match_file in match_files)


def check_files(files, check):
    "run the test on the file"
    result = 0
    print(check['output'])
    for file_name in files:
        if not 'match_files' in check or matches_file(
                file_name, check['match_files']):
            if not 'ignore_files' in check or not matches_file(
                    file_name, check['ignore_files']):
                process = subprocess.Popen(check['command'] % file_name,
                                           stdout=subprocess.PIPE,
                                           stderr=subprocess.PIPE,
                                           shell=True)
                out, err = [output.decode("utf-8")
                            for output in process.communicate()]
                if out or err:
                    if check['print_filename']:
                        prefix = '\t%s:' % file_name
                    else:
                        prefix = '\t'
                    output_lines = ['%s%s' % (prefix, line)
                                    for line in out.splitlines()]
                    print('\n'.join(output_lines))
                    if err:
                        print(err)
                    result = 1
    return result


def main(files):
    # Stash any changes to the working tree that are not going to be committed
    subprocess.call(['git', 'stash', '-u', '--keep-index'],
                    stdout=subprocess.PIPE)

    files = []
    if files:
        for root, _, file_names in os.walk('.'):
            for file_name in file_names:
                files.append(os.path.join(root, file_name))
    else:
        out = subprocess.check_output(['git', 'status', '--porcelain'])
        out = out.decode("utf-8")
        for line in out.splitlines():
            match = modified.match(line)
            if match:
                files.append(match.group('name'))

    result = 0

    for check in CHECKS:
        result = check_files(files, check) or result

    # Unstash changes to the working tree that we had stashed
    subprocess.call(['git', 'reset', '--hard'],
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    subprocess.call(['git', 'stash', 'pop', '--quiet', '--index'],
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    sys.exit(result)


if __name__ == '__main__':
    all_files = False
    if len(sys.argv) > 1 and sys.argv[1] == '--all-files':
        all_files = True
    main(all_files)
